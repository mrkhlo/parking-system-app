/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mhalo.parking.service.core.domain;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class PaymentAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8371607246621488391L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentAvroModel\",\"namespace\":\"mhalo.parking.service.core.domain\",\"fields\":[{\"name\":\"paymentId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"parkingId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"transaction\",\"type\":{\"type\":\"record\",\"name\":\"TransactionAvroModel\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"providerTransactionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"transactionType\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionTypeAvroModel\",\"symbols\":[\"DEBIT\",\"CREDIT\"]}},{\"name\":\"transactionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionStatusAvroModel\",\"symbols\":[\"SUCCESS\",\"FAILURE\"]}},{\"name\":\"executedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}},{\"name\":\"paymentStatus\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatusAvroModel\",\"symbols\":[\"DEBITED\",\"DEBIT_FAILED\",\"REFUNDED\",\"REFUND_FAILED\"]}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<PaymentAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID paymentId;
  private java.util.UUID parkingId;
  private java.util.UUID customerId;
  private mhalo.parking.service.core.domain.TransactionAvroModel transaction;
  private mhalo.parking.service.core.domain.PaymentStatusAvroModel paymentStatus;
  private java.time.Instant createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentAvroModel() {}

  /**
   * All-args constructor.
   * @param paymentId The new value for paymentId
   * @param parkingId The new value for parkingId
   * @param customerId The new value for customerId
   * @param transaction The new value for transaction
   * @param paymentStatus The new value for paymentStatus
   * @param createdAt The new value for createdAt
   */
  public PaymentAvroModel(java.util.UUID paymentId, java.util.UUID parkingId, java.util.UUID customerId, mhalo.parking.service.core.domain.TransactionAvroModel transaction, mhalo.parking.service.core.domain.PaymentStatusAvroModel paymentStatus, java.time.Instant createdAt) {
    this.paymentId = paymentId;
    this.parkingId = parkingId;
    this.customerId = customerId;
    this.transaction = transaction;
    this.paymentStatus = paymentStatus;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentId;
    case 1: return parkingId;
    case 2: return customerId;
    case 3: return transaction;
    case 4: return paymentStatus;
    case 5: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentId = (java.util.UUID)value$; break;
    case 1: parkingId = (java.util.UUID)value$; break;
    case 2: customerId = (java.util.UUID)value$; break;
    case 3: transaction = (mhalo.parking.service.core.domain.TransactionAvroModel)value$; break;
    case 4: paymentStatus = (mhalo.parking.service.core.domain.PaymentStatusAvroModel)value$; break;
    case 5: createdAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'paymentId' field.
   * @return The value of the 'paymentId' field.
   */
  public java.util.UUID getPaymentId() {
    return paymentId;
  }


  /**
   * Sets the value of the 'paymentId' field.
   * @param value the value to set.
   */
  public void setPaymentId(java.util.UUID value) {
    this.paymentId = value;
  }

  /**
   * Gets the value of the 'parkingId' field.
   * @return The value of the 'parkingId' field.
   */
  public java.util.UUID getParkingId() {
    return parkingId;
  }


  /**
   * Sets the value of the 'parkingId' field.
   * @param value the value to set.
   */
  public void setParkingId(java.util.UUID value) {
    this.parkingId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.util.UUID getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.util.UUID value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'transaction' field.
   * @return The value of the 'transaction' field.
   */
  public mhalo.parking.service.core.domain.TransactionAvroModel getTransaction() {
    return transaction;
  }


  /**
   * Sets the value of the 'transaction' field.
   * @param value the value to set.
   */
  public void setTransaction(mhalo.parking.service.core.domain.TransactionAvroModel value) {
    this.transaction = value;
  }

  /**
   * Gets the value of the 'paymentStatus' field.
   * @return The value of the 'paymentStatus' field.
   */
  public mhalo.parking.service.core.domain.PaymentStatusAvroModel getPaymentStatus() {
    return paymentStatus;
  }


  /**
   * Sets the value of the 'paymentStatus' field.
   * @param value the value to set.
   */
  public void setPaymentStatus(mhalo.parking.service.core.domain.PaymentStatusAvroModel value) {
    this.paymentStatus = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new PaymentAvroModel RecordBuilder.
   * @return A new PaymentAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.PaymentAvroModel.Builder newBuilder() {
    return new mhalo.parking.service.core.domain.PaymentAvroModel.Builder();
  }

  /**
   * Creates a new PaymentAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.PaymentAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.PaymentAvroModel.Builder other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.PaymentAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.PaymentAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new PaymentAvroModel RecordBuilder by copying an existing PaymentAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new PaymentAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.PaymentAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.PaymentAvroModel other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.PaymentAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.PaymentAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentAvroModel>
    implements org.apache.avro.data.RecordBuilder<PaymentAvroModel> {

    private java.util.UUID paymentId;
    private java.util.UUID parkingId;
    private java.util.UUID customerId;
    private mhalo.parking.service.core.domain.TransactionAvroModel transaction;
    private mhalo.parking.service.core.domain.TransactionAvroModel.Builder transactionBuilder;
    private mhalo.parking.service.core.domain.PaymentStatusAvroModel paymentStatus;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mhalo.parking.service.core.domain.PaymentAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.parkingId)) {
        this.parkingId = data().deepCopy(fields()[1].schema(), other.parkingId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transaction)) {
        this.transaction = data().deepCopy(fields()[3].schema(), other.transaction);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasTransactionBuilder()) {
        this.transactionBuilder = mhalo.parking.service.core.domain.TransactionAvroModel.newBuilder(other.getTransactionBuilder());
      }
      if (isValidValue(fields()[4], other.paymentStatus)) {
        this.paymentStatus = data().deepCopy(fields()[4].schema(), other.paymentStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(mhalo.parking.service.core.domain.PaymentAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parkingId)) {
        this.parkingId = data().deepCopy(fields()[1].schema(), other.parkingId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transaction)) {
        this.transaction = data().deepCopy(fields()[3].schema(), other.transaction);
        fieldSetFlags()[3] = true;
      }
      this.transactionBuilder = null;
      if (isValidValue(fields()[4], other.paymentStatus)) {
        this.paymentStatus = data().deepCopy(fields()[4].schema(), other.paymentStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'paymentId' field.
      * @return The value.
      */
    public java.util.UUID getPaymentId() {
      return paymentId;
    }


    /**
      * Sets the value of the 'paymentId' field.
      * @param value The value of 'paymentId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setPaymentId(java.util.UUID value) {
      validate(fields()[0], value);
      this.paymentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentId' field has been set.
      * @return True if the 'paymentId' field has been set, false otherwise.
      */
    public boolean hasPaymentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearPaymentId() {
      paymentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parkingId' field.
      * @return The value.
      */
    public java.util.UUID getParkingId() {
      return parkingId;
    }


    /**
      * Sets the value of the 'parkingId' field.
      * @param value The value of 'parkingId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setParkingId(java.util.UUID value) {
      validate(fields()[1], value);
      this.parkingId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parkingId' field has been set.
      * @return True if the 'parkingId' field has been set, false otherwise.
      */
    public boolean hasParkingId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parkingId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearParkingId() {
      parkingId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.util.UUID getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setCustomerId(java.util.UUID value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction' field.
      * @return The value.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel getTransaction() {
      return transaction;
    }


    /**
      * Sets the value of the 'transaction' field.
      * @param value The value of 'transaction'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setTransaction(mhalo.parking.service.core.domain.TransactionAvroModel value) {
      validate(fields()[3], value);
      this.transactionBuilder = null;
      this.transaction = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction' field has been set.
      * @return True if the 'transaction' field has been set, false otherwise.
      */
    public boolean hasTransaction() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'transaction' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder getTransactionBuilder() {
      if (transactionBuilder == null) {
        if (hasTransaction()) {
          setTransactionBuilder(mhalo.parking.service.core.domain.TransactionAvroModel.newBuilder(transaction));
        } else {
          setTransactionBuilder(mhalo.parking.service.core.domain.TransactionAvroModel.newBuilder());
        }
      }
      return transactionBuilder;
    }

    /**
     * Sets the Builder instance for the 'transaction' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setTransactionBuilder(mhalo.parking.service.core.domain.TransactionAvroModel.Builder value) {
      clearTransaction();
      transactionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transaction' field has an active Builder instance
     * @return True if the 'transaction' field has an active Builder instance
     */
    public boolean hasTransactionBuilder() {
      return transactionBuilder != null;
    }

    /**
      * Clears the value of the 'transaction' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearTransaction() {
      transaction = null;
      transactionBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentStatus' field.
      * @return The value.
      */
    public mhalo.parking.service.core.domain.PaymentStatusAvroModel getPaymentStatus() {
      return paymentStatus;
    }


    /**
      * Sets the value of the 'paymentStatus' field.
      * @param value The value of 'paymentStatus'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setPaymentStatus(mhalo.parking.service.core.domain.PaymentStatusAvroModel value) {
      validate(fields()[4], value);
      this.paymentStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentStatus' field has been set.
      * @return True if the 'paymentStatus' field has been set, false otherwise.
      */
    public boolean hasPaymentStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'paymentStatus' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearPaymentStatus() {
      paymentStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[5], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.PaymentAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentAvroModel build() {
      try {
        PaymentAvroModel record = new PaymentAvroModel();
        record.paymentId = fieldSetFlags()[0] ? this.paymentId : (java.util.UUID) defaultValue(fields()[0]);
        record.parkingId = fieldSetFlags()[1] ? this.parkingId : (java.util.UUID) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.util.UUID) defaultValue(fields()[2]);
        if (transactionBuilder != null) {
          try {
            record.transaction = this.transactionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("transaction"));
            throw e;
          }
        } else {
          record.transaction = fieldSetFlags()[3] ? this.transaction : (mhalo.parking.service.core.domain.TransactionAvroModel) defaultValue(fields()[3]);
        }
        record.paymentStatus = fieldSetFlags()[4] ? this.paymentStatus : (mhalo.parking.service.core.domain.PaymentStatusAvroModel) defaultValue(fields()[4]);
        record.createdAt = fieldSetFlags()[5] ? this.createdAt : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<PaymentAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










