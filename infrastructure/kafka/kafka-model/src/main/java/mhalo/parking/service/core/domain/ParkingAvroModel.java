/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mhalo.parking.service.core.domain;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class ParkingAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8973585209617714570L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ParkingAvroModel\",\"namespace\":\"mhalo.parking.service.core.domain\",\"fields\":[{\"name\":\"parkingId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"zoneId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"trackingId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"licensePlateNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"startingFee\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"closingFee\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}],\"default\":null},{\"name\":\"startedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"stoppedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<ParkingAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ParkingAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ParkingAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ParkingAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ParkingAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ParkingAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ParkingAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ParkingAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ParkingAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID parkingId;
  private java.util.UUID customerId;
  private java.util.UUID zoneId;
  private java.util.UUID trackingId;
  private java.lang.String licensePlateNumber;
  private java.math.BigDecimal startingFee;
  private java.math.BigDecimal closingFee;
  private java.time.Instant startedAt;
  private java.time.Instant stoppedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ParkingAvroModel() {}

  /**
   * All-args constructor.
   * @param parkingId The new value for parkingId
   * @param customerId The new value for customerId
   * @param zoneId The new value for zoneId
   * @param trackingId The new value for trackingId
   * @param licensePlateNumber The new value for licensePlateNumber
   * @param startingFee The new value for startingFee
   * @param closingFee The new value for closingFee
   * @param startedAt The new value for startedAt
   * @param stoppedAt The new value for stoppedAt
   */
  public ParkingAvroModel(java.util.UUID parkingId, java.util.UUID customerId, java.util.UUID zoneId, java.util.UUID trackingId, java.lang.String licensePlateNumber, java.math.BigDecimal startingFee, java.math.BigDecimal closingFee, java.time.Instant startedAt, java.time.Instant stoppedAt) {
    this.parkingId = parkingId;
    this.customerId = customerId;
    this.zoneId = zoneId;
    this.trackingId = trackingId;
    this.licensePlateNumber = licensePlateNumber;
    this.startingFee = startingFee;
    this.closingFee = closingFee;
    this.startedAt = startedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.stoppedAt = stoppedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return parkingId;
    case 1: return customerId;
    case 2: return zoneId;
    case 3: return trackingId;
    case 4: return licensePlateNumber;
    case 5: return startingFee;
    case 6: return closingFee;
    case 7: return startedAt;
    case 8: return stoppedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: parkingId = (java.util.UUID)value$; break;
    case 1: customerId = (java.util.UUID)value$; break;
    case 2: zoneId = (java.util.UUID)value$; break;
    case 3: trackingId = (java.util.UUID)value$; break;
    case 4: licensePlateNumber = value$ != null ? value$.toString() : null; break;
    case 5: startingFee = (java.math.BigDecimal)value$; break;
    case 6: closingFee = (java.math.BigDecimal)value$; break;
    case 7: startedAt = (java.time.Instant)value$; break;
    case 8: stoppedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'parkingId' field.
   * @return The value of the 'parkingId' field.
   */
  public java.util.UUID getParkingId() {
    return parkingId;
  }


  /**
   * Sets the value of the 'parkingId' field.
   * @param value the value to set.
   */
  public void setParkingId(java.util.UUID value) {
    this.parkingId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.util.UUID getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.util.UUID value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'zoneId' field.
   * @return The value of the 'zoneId' field.
   */
  public java.util.UUID getZoneId() {
    return zoneId;
  }


  /**
   * Sets the value of the 'zoneId' field.
   * @param value the value to set.
   */
  public void setZoneId(java.util.UUID value) {
    this.zoneId = value;
  }

  /**
   * Gets the value of the 'trackingId' field.
   * @return The value of the 'trackingId' field.
   */
  public java.util.UUID getTrackingId() {
    return trackingId;
  }


  /**
   * Sets the value of the 'trackingId' field.
   * @param value the value to set.
   */
  public void setTrackingId(java.util.UUID value) {
    this.trackingId = value;
  }

  /**
   * Gets the value of the 'licensePlateNumber' field.
   * @return The value of the 'licensePlateNumber' field.
   */
  public java.lang.String getLicensePlateNumber() {
    return licensePlateNumber;
  }


  /**
   * Sets the value of the 'licensePlateNumber' field.
   * @param value the value to set.
   */
  public void setLicensePlateNumber(java.lang.String value) {
    this.licensePlateNumber = value;
  }

  /**
   * Gets the value of the 'startingFee' field.
   * @return The value of the 'startingFee' field.
   */
  public java.math.BigDecimal getStartingFee() {
    return startingFee;
  }


  /**
   * Sets the value of the 'startingFee' field.
   * @param value the value to set.
   */
  public void setStartingFee(java.math.BigDecimal value) {
    this.startingFee = value;
  }

  /**
   * Gets the value of the 'closingFee' field.
   * @return The value of the 'closingFee' field.
   */
  public java.math.BigDecimal getClosingFee() {
    return closingFee;
  }


  /**
   * Sets the value of the 'closingFee' field.
   * @param value the value to set.
   */
  public void setClosingFee(java.math.BigDecimal value) {
    this.closingFee = value;
  }

  /**
   * Gets the value of the 'startedAt' field.
   * @return The value of the 'startedAt' field.
   */
  public java.time.Instant getStartedAt() {
    return startedAt;
  }


  /**
   * Sets the value of the 'startedAt' field.
   * @param value the value to set.
   */
  public void setStartedAt(java.time.Instant value) {
    this.startedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'stoppedAt' field.
   * @return The value of the 'stoppedAt' field.
   */
  public java.time.Instant getStoppedAt() {
    return stoppedAt;
  }


  /**
   * Sets the value of the 'stoppedAt' field.
   * @param value the value to set.
   */
  public void setStoppedAt(java.time.Instant value) {
    this.stoppedAt = value;
  }

  /**
   * Creates a new ParkingAvroModel RecordBuilder.
   * @return A new ParkingAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.ParkingAvroModel.Builder newBuilder() {
    return new mhalo.parking.service.core.domain.ParkingAvroModel.Builder();
  }

  /**
   * Creates a new ParkingAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ParkingAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.ParkingAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.ParkingAvroModel.Builder other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.ParkingAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.ParkingAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new ParkingAvroModel RecordBuilder by copying an existing ParkingAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new ParkingAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.ParkingAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.ParkingAvroModel other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.ParkingAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.ParkingAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for ParkingAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ParkingAvroModel>
    implements org.apache.avro.data.RecordBuilder<ParkingAvroModel> {

    private java.util.UUID parkingId;
    private java.util.UUID customerId;
    private java.util.UUID zoneId;
    private java.util.UUID trackingId;
    private java.lang.String licensePlateNumber;
    private java.math.BigDecimal startingFee;
    private java.math.BigDecimal closingFee;
    private java.time.Instant startedAt;
    private java.time.Instant stoppedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mhalo.parking.service.core.domain.ParkingAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.parkingId)) {
        this.parkingId = data().deepCopy(fields()[0].schema(), other.parkingId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.zoneId)) {
        this.zoneId = data().deepCopy(fields()[2].schema(), other.zoneId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.trackingId)) {
        this.trackingId = data().deepCopy(fields()[3].schema(), other.trackingId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.licensePlateNumber)) {
        this.licensePlateNumber = data().deepCopy(fields()[4].schema(), other.licensePlateNumber);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.startingFee)) {
        this.startingFee = data().deepCopy(fields()[5].schema(), other.startingFee);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.closingFee)) {
        this.closingFee = data().deepCopy(fields()[6].schema(), other.closingFee);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.startedAt)) {
        this.startedAt = data().deepCopy(fields()[7].schema(), other.startedAt);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.stoppedAt)) {
        this.stoppedAt = data().deepCopy(fields()[8].schema(), other.stoppedAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing ParkingAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(mhalo.parking.service.core.domain.ParkingAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.parkingId)) {
        this.parkingId = data().deepCopy(fields()[0].schema(), other.parkingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.zoneId)) {
        this.zoneId = data().deepCopy(fields()[2].schema(), other.zoneId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trackingId)) {
        this.trackingId = data().deepCopy(fields()[3].schema(), other.trackingId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.licensePlateNumber)) {
        this.licensePlateNumber = data().deepCopy(fields()[4].schema(), other.licensePlateNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startingFee)) {
        this.startingFee = data().deepCopy(fields()[5].schema(), other.startingFee);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.closingFee)) {
        this.closingFee = data().deepCopy(fields()[6].schema(), other.closingFee);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.startedAt)) {
        this.startedAt = data().deepCopy(fields()[7].schema(), other.startedAt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.stoppedAt)) {
        this.stoppedAt = data().deepCopy(fields()[8].schema(), other.stoppedAt);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'parkingId' field.
      * @return The value.
      */
    public java.util.UUID getParkingId() {
      return parkingId;
    }


    /**
      * Sets the value of the 'parkingId' field.
      * @param value The value of 'parkingId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setParkingId(java.util.UUID value) {
      validate(fields()[0], value);
      this.parkingId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'parkingId' field has been set.
      * @return True if the 'parkingId' field has been set, false otherwise.
      */
    public boolean hasParkingId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'parkingId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearParkingId() {
      parkingId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.util.UUID getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setCustomerId(java.util.UUID value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'zoneId' field.
      * @return The value.
      */
    public java.util.UUID getZoneId() {
      return zoneId;
    }


    /**
      * Sets the value of the 'zoneId' field.
      * @param value The value of 'zoneId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setZoneId(java.util.UUID value) {
      validate(fields()[2], value);
      this.zoneId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'zoneId' field has been set.
      * @return True if the 'zoneId' field has been set, false otherwise.
      */
    public boolean hasZoneId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'zoneId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearZoneId() {
      zoneId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackingId' field.
      * @return The value.
      */
    public java.util.UUID getTrackingId() {
      return trackingId;
    }


    /**
      * Sets the value of the 'trackingId' field.
      * @param value The value of 'trackingId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setTrackingId(java.util.UUID value) {
      validate(fields()[3], value);
      this.trackingId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'trackingId' field has been set.
      * @return True if the 'trackingId' field has been set, false otherwise.
      */
    public boolean hasTrackingId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'trackingId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearTrackingId() {
      trackingId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'licensePlateNumber' field.
      * @return The value.
      */
    public java.lang.String getLicensePlateNumber() {
      return licensePlateNumber;
    }


    /**
      * Sets the value of the 'licensePlateNumber' field.
      * @param value The value of 'licensePlateNumber'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setLicensePlateNumber(java.lang.String value) {
      validate(fields()[4], value);
      this.licensePlateNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'licensePlateNumber' field has been set.
      * @return True if the 'licensePlateNumber' field has been set, false otherwise.
      */
    public boolean hasLicensePlateNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'licensePlateNumber' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearLicensePlateNumber() {
      licensePlateNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startingFee' field.
      * @return The value.
      */
    public java.math.BigDecimal getStartingFee() {
      return startingFee;
    }


    /**
      * Sets the value of the 'startingFee' field.
      * @param value The value of 'startingFee'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setStartingFee(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.startingFee = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startingFee' field has been set.
      * @return True if the 'startingFee' field has been set, false otherwise.
      */
    public boolean hasStartingFee() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startingFee' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearStartingFee() {
      startingFee = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'closingFee' field.
      * @return The value.
      */
    public java.math.BigDecimal getClosingFee() {
      return closingFee;
    }


    /**
      * Sets the value of the 'closingFee' field.
      * @param value The value of 'closingFee'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setClosingFee(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.closingFee = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'closingFee' field has been set.
      * @return True if the 'closingFee' field has been set, false otherwise.
      */
    public boolean hasClosingFee() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'closingFee' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearClosingFee() {
      closingFee = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'startedAt' field.
      * @return The value.
      */
    public java.time.Instant getStartedAt() {
      return startedAt;
    }


    /**
      * Sets the value of the 'startedAt' field.
      * @param value The value of 'startedAt'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setStartedAt(java.time.Instant value) {
      validate(fields()[7], value);
      this.startedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'startedAt' field has been set.
      * @return True if the 'startedAt' field has been set, false otherwise.
      */
    public boolean hasStartedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'startedAt' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearStartedAt() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'stoppedAt' field.
      * @return The value.
      */
    public java.time.Instant getStoppedAt() {
      return stoppedAt;
    }


    /**
      * Sets the value of the 'stoppedAt' field.
      * @param value The value of 'stoppedAt'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder setStoppedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.stoppedAt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'stoppedAt' field has been set.
      * @return True if the 'stoppedAt' field has been set, false otherwise.
      */
    public boolean hasStoppedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'stoppedAt' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.ParkingAvroModel.Builder clearStoppedAt() {
      stoppedAt = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ParkingAvroModel build() {
      try {
        ParkingAvroModel record = new ParkingAvroModel();
        record.parkingId = fieldSetFlags()[0] ? this.parkingId : (java.util.UUID) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.util.UUID) defaultValue(fields()[1]);
        record.zoneId = fieldSetFlags()[2] ? this.zoneId : (java.util.UUID) defaultValue(fields()[2]);
        record.trackingId = fieldSetFlags()[3] ? this.trackingId : (java.util.UUID) defaultValue(fields()[3]);
        record.licensePlateNumber = fieldSetFlags()[4] ? this.licensePlateNumber : (java.lang.String) defaultValue(fields()[4]);
        record.startingFee = fieldSetFlags()[5] ? this.startingFee : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.closingFee = fieldSetFlags()[6] ? this.closingFee : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.startedAt = fieldSetFlags()[7] ? this.startedAt : (java.time.Instant) defaultValue(fields()[7]);
        record.stoppedAt = fieldSetFlags()[8] ? this.stoppedAt : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ParkingAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<ParkingAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ParkingAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<ParkingAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










