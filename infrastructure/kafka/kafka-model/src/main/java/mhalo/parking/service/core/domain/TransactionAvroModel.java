/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mhalo.parking.service.core.domain;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TransactionAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6090519087480836644L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionAvroModel\",\"namespace\":\"mhalo.parking.service.core.domain\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"providerTransactionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"transactionType\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionTypeAvroModel\",\"symbols\":[\"DEBIT\",\"CREDIT\"]}},{\"name\":\"transactionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionStatusAvroModel\",\"symbols\":[\"SUCCESS\",\"FAILURE\"]}},{\"name\":\"executedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<TransactionAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID transactionId;
  private java.util.UUID providerTransactionId;
  private java.math.BigDecimal amount;
  private mhalo.parking.service.core.domain.TransactionTypeAvroModel transactionType;
  private mhalo.parking.service.core.domain.TransactionStatusAvroModel transactionStatus;
  private java.time.Instant executedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionAvroModel() {}

  /**
   * All-args constructor.
   * @param transactionId The new value for transactionId
   * @param providerTransactionId The new value for providerTransactionId
   * @param amount The new value for amount
   * @param transactionType The new value for transactionType
   * @param transactionStatus The new value for transactionStatus
   * @param executedAt The new value for executedAt
   */
  public TransactionAvroModel(java.util.UUID transactionId, java.util.UUID providerTransactionId, java.math.BigDecimal amount, mhalo.parking.service.core.domain.TransactionTypeAvroModel transactionType, mhalo.parking.service.core.domain.TransactionStatusAvroModel transactionStatus, java.time.Instant executedAt) {
    this.transactionId = transactionId;
    this.providerTransactionId = providerTransactionId;
    this.amount = amount;
    this.transactionType = transactionType;
    this.transactionStatus = transactionStatus;
    this.executedAt = executedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return providerTransactionId;
    case 2: return amount;
    case 3: return transactionType;
    case 4: return transactionStatus;
    case 5: return executedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = (java.util.UUID)value$; break;
    case 1: providerTransactionId = (java.util.UUID)value$; break;
    case 2: amount = (java.math.BigDecimal)value$; break;
    case 3: transactionType = (mhalo.parking.service.core.domain.TransactionTypeAvroModel)value$; break;
    case 4: transactionStatus = (mhalo.parking.service.core.domain.TransactionStatusAvroModel)value$; break;
    case 5: executedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.util.UUID getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.util.UUID value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'providerTransactionId' field.
   * @return The value of the 'providerTransactionId' field.
   */
  public java.util.UUID getProviderTransactionId() {
    return providerTransactionId;
  }


  /**
   * Sets the value of the 'providerTransactionId' field.
   * @param value the value to set.
   */
  public void setProviderTransactionId(java.util.UUID value) {
    this.providerTransactionId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return The value of the 'transactionType' field.
   */
  public mhalo.parking.service.core.domain.TransactionTypeAvroModel getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * @param value the value to set.
   */
  public void setTransactionType(mhalo.parking.service.core.domain.TransactionTypeAvroModel value) {
    this.transactionType = value;
  }

  /**
   * Gets the value of the 'transactionStatus' field.
   * @return The value of the 'transactionStatus' field.
   */
  public mhalo.parking.service.core.domain.TransactionStatusAvroModel getTransactionStatus() {
    return transactionStatus;
  }


  /**
   * Sets the value of the 'transactionStatus' field.
   * @param value the value to set.
   */
  public void setTransactionStatus(mhalo.parking.service.core.domain.TransactionStatusAvroModel value) {
    this.transactionStatus = value;
  }

  /**
   * Gets the value of the 'executedAt' field.
   * @return The value of the 'executedAt' field.
   */
  public java.time.Instant getExecutedAt() {
    return executedAt;
  }


  /**
   * Sets the value of the 'executedAt' field.
   * @param value the value to set.
   */
  public void setExecutedAt(java.time.Instant value) {
    this.executedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TransactionAvroModel RecordBuilder.
   * @return A new TransactionAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.TransactionAvroModel.Builder newBuilder() {
    return new mhalo.parking.service.core.domain.TransactionAvroModel.Builder();
  }

  /**
   * Creates a new TransactionAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.TransactionAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.TransactionAvroModel.Builder other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.TransactionAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.TransactionAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new TransactionAvroModel RecordBuilder by copying an existing TransactionAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new TransactionAvroModel RecordBuilder
   */
  public static mhalo.parking.service.core.domain.TransactionAvroModel.Builder newBuilder(mhalo.parking.service.core.domain.TransactionAvroModel other) {
    if (other == null) {
      return new mhalo.parking.service.core.domain.TransactionAvroModel.Builder();
    } else {
      return new mhalo.parking.service.core.domain.TransactionAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionAvroModel>
    implements org.apache.avro.data.RecordBuilder<TransactionAvroModel> {

    private java.util.UUID transactionId;
    private java.util.UUID providerTransactionId;
    private java.math.BigDecimal amount;
    private mhalo.parking.service.core.domain.TransactionTypeAvroModel transactionType;
    private mhalo.parking.service.core.domain.TransactionStatusAvroModel transactionStatus;
    private java.time.Instant executedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mhalo.parking.service.core.domain.TransactionAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.providerTransactionId)) {
        this.providerTransactionId = data().deepCopy(fields()[1].schema(), other.providerTransactionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[3].schema(), other.transactionType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionStatus)) {
        this.transactionStatus = data().deepCopy(fields()[4].schema(), other.transactionStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.executedAt)) {
        this.executedAt = data().deepCopy(fields()[5].schema(), other.executedAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(mhalo.parking.service.core.domain.TransactionAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.providerTransactionId)) {
        this.providerTransactionId = data().deepCopy(fields()[1].schema(), other.providerTransactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[3].schema(), other.transactionType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionStatus)) {
        this.transactionStatus = data().deepCopy(fields()[4].schema(), other.transactionStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.executedAt)) {
        this.executedAt = data().deepCopy(fields()[5].schema(), other.executedAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.util.UUID getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setTransactionId(java.util.UUID value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerTransactionId' field.
      * @return The value.
      */
    public java.util.UUID getProviderTransactionId() {
      return providerTransactionId;
    }


    /**
      * Sets the value of the 'providerTransactionId' field.
      * @param value The value of 'providerTransactionId'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setProviderTransactionId(java.util.UUID value) {
      validate(fields()[1], value);
      this.providerTransactionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'providerTransactionId' field has been set.
      * @return True if the 'providerTransactionId' field has been set, false otherwise.
      */
    public boolean hasProviderTransactionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'providerTransactionId' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearProviderTransactionId() {
      providerTransactionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * @return The value.
      */
    public mhalo.parking.service.core.domain.TransactionTypeAvroModel getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setTransactionType(mhalo.parking.service.core.domain.TransactionTypeAvroModel value) {
      validate(fields()[3], value);
      this.transactionType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionStatus' field.
      * @return The value.
      */
    public mhalo.parking.service.core.domain.TransactionStatusAvroModel getTransactionStatus() {
      return transactionStatus;
    }


    /**
      * Sets the value of the 'transactionStatus' field.
      * @param value The value of 'transactionStatus'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setTransactionStatus(mhalo.parking.service.core.domain.TransactionStatusAvroModel value) {
      validate(fields()[4], value);
      this.transactionStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionStatus' field has been set.
      * @return True if the 'transactionStatus' field has been set, false otherwise.
      */
    public boolean hasTransactionStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionStatus' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearTransactionStatus() {
      transactionStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'executedAt' field.
      * @return The value.
      */
    public java.time.Instant getExecutedAt() {
      return executedAt;
    }


    /**
      * Sets the value of the 'executedAt' field.
      * @param value The value of 'executedAt'.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder setExecutedAt(java.time.Instant value) {
      validate(fields()[5], value);
      this.executedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'executedAt' field has been set.
      * @return True if the 'executedAt' field has been set, false otherwise.
      */
    public boolean hasExecutedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'executedAt' field.
      * @return This builder.
      */
    public mhalo.parking.service.core.domain.TransactionAvroModel.Builder clearExecutedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionAvroModel build() {
      try {
        TransactionAvroModel record = new TransactionAvroModel();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.util.UUID) defaultValue(fields()[0]);
        record.providerTransactionId = fieldSetFlags()[1] ? this.providerTransactionId : (java.util.UUID) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.transactionType = fieldSetFlags()[3] ? this.transactionType : (mhalo.parking.service.core.domain.TransactionTypeAvroModel) defaultValue(fields()[3]);
        record.transactionStatus = fieldSetFlags()[4] ? this.transactionStatus : (mhalo.parking.service.core.domain.TransactionStatusAvroModel) defaultValue(fields()[4]);
        record.executedAt = fieldSetFlags()[5] ? this.executedAt : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<TransactionAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










